version: '3.7'

services:
  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data # Ensure this volume is defined

  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - '5432:5432'

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.1
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.1
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - elastic

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.1
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
      - elastic

  nestjs-app:
    build:
      context: .
      dockerfile: ${DOCKERFILE:-Dockerfile}
    container_name: app
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: $POSTGRES_PORT
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
      JWT_SECRET: $JWT_SECRET
      REFRESH_SECRET: $REFRESH_SECRET
      REDIS_HOST: redis
      REDIS_PORT: $REDIS_PORT
      NODE_ENV: ${NODE_ENV:-production}
    volumes:
      - ./src:/app/src # Sync local src folder with container's src folder
      - ./node_modules:/app/node_modules # Avoid re-installing node_modules
    depends_on:
      - postgres
    ports:
      - '3999:3999'
    # command: npm run start:dev

networks:
  elastic:
    driver: bridge

volumes:
  pgdata: # Volume for PostgreSQL
  redis-data: # Volume for Redis (add this)
  data-volume:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local
